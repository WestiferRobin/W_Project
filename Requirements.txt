Blocked:

Finished:
    - Wrote small test cases and bluprint design for implementing LR(1) parser
    - Writing inital set archetecutre
    - Able to read hexdecimal assembly code to be interperated
    - Error handler and displayer
    - Finish completed work in the requirements (just implement requirements.txt practice during mid project)
    - Definate and come up with better names than the W_Language... fucking embearssing.
        - Whole Number language => W_Lang because were just using integers for the code. its an impractical compiler.
    - add assebly readable for testing when doing the compiler and so forth 
        - global variable that is able to print the assembly that is being processed
    - general test for procedural functionality 
    - rewrite highlevel syntax
    - Restructure order of file system in source. (look at project for VS C++ on windows)
    - fix the expression with the LL(1) implementation.
    - fix the negative number in scanner.
    - write the LL(1) parser
        - working with finishing assignment and applying boolean expressions into normal expressions.
        - finish working on condition statements
        - finish on loops 
        - add bitwise operators 
            - and &
            - or |
            - exclusive ^ 
            - not !
            - left <<
            - right >>
        - add a debug print that will later be integrated
    - Add line counter for jumps system. will need to rework the assembly and some other information.
        - also add it to the english framework
        ex.) L1: load r1, 234
                 add r1, 1
                 print r1
    - write an error reader.... its getting very sloppy
    - fix bug with scanner and numbers
    - fix bug with variable declarations
    - refactor processor and assebly representation.
        - write backend code generator  
        - convert assembly english to byteCode.
        - convert assembly from compiler
    - test and record bugs.
    - fix boolean logic in assembly.
    - fix ast expression for booleans for add and or. 
    - Refactor error reader from both Processor and Compiler in the parent location.
    - modulus support
    - Able to read different flags on command line.
    - switch statements
    - global variables
    - Write function support
        - with return working

In Progress:
    - array, strings, and chars

TODO:
    - Write default libary
        - integrate with current print statement
    - Write cross file communication
        - use private and public access 
    - Clean up the double load registers
    - Clean up char and strings having '\' to work
    - Fix Switch bug with able to have multiple cases and sometimes no breaks and some times no defaults
    - Fix Function calls to be integrated with ALUing its return value
    - Finalize errors after all is well said and done.
    - CLEAN AND DOCUMENT!
    - Make builds for Linux, macos, and Window versions
        - Final step and publish on github
        - toy with making it be a real compiler aka work for nasm ld and launch

